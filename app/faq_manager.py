"""
FAQ Manager
–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–π —á–∞—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
"""

import json
import logging
from typing import List, Dict, Optional
from config import Config

logger = logging.getLogger(__name__)

class FAQManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π FAQ"""
    
    def __init__(self):
        self.faq_file_path = Config.FAQ_FILE_PATH
        self.faq_data = []
        self.load_faq()
    
    def load_faq(self) -> bool:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç FAQ –∏–∑ JSON —Ñ–∞–π–ª–∞
        
        Returns:
            bool: True –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞
        """
        try:
            with open(self.faq_file_path, 'r', encoding='utf-8') as file:
                data = json.load(file)
                self.faq_data = data.get('faq', [])
            
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.faq_data)} FAQ –∑–∞–ø–∏—Å–µ–π")
            return True
            
        except FileNotFoundError:
            logger.error(f"FAQ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.faq_file_path}")
            self._create_default_faq()
            return False
        except json.JSONDecodeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON —Ñ–∞–π–ª–∞ FAQ: {e}")
            return False
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ FAQ: {e}")
            return False
    
    def _create_default_faq(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª FAQ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        default_faq = {
            "faq": [
                {
                    "id": 1,
                    "question": "–ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑?",
                    "answer": "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ —Å–∞–π—Ç–µ. –ú—ã –ø–µ—Ä–µ–∑–≤–æ–Ω–∏–º –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç! üìû",
                    "keywords": ["–∑–∞–∫–∞–∑", "–æ—Ñ–æ—Ä–º–∏—Ç—å", "–∫—É–ø–∏—Ç—å", "–∑–∞–∫–∞–∑–∞—Ç—å"]
                },
                {
                    "id": 2,
                    "question": "–ö–∞–∫–∏–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã?",
                    "answer": "–ú—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º –Ω–∞–ª–∏—á–Ω—ã–µ, –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã, –ø–µ—Ä–µ–≤–æ–¥—ã –∏ –æ–Ω–ª–∞–π–Ω-–ø–ª–∞—Ç–µ–∂–∏. –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–±! üí≥",
                    "keywords": ["–æ–ø–ª–∞—Ç–∞", "—Å–ø–æ—Å–æ–±—ã", "–ø–ª–∞—Ç–∏—Ç—å", "–¥–µ–Ω—å–≥–∏", "–∫–∞—Ä—Ç–∞"]
                },
                {
                    "id": 3,
                    "question": "–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∞?",
                    "answer": "–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≥–æ—Ä–æ–¥—É –∑–∞–Ω–∏–º–∞–µ—Ç 1-2 –¥–Ω—è, –ø–æ –æ–±–ª–∞—Å—Ç–∏ 2-3 –¥–Ω—è. –¢–æ—á–Ω—ã–µ —Å—Ä–æ–∫–∏ —É—Ç–æ—á–Ω—è–π—Ç–µ —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞! üöö",
                    "keywords": ["–¥–æ—Å—Ç–∞–≤–∫–∞", "—Å—Ä–æ–∫–∏", "–≤—Ä–µ–º—è", "–∫–æ–≥–¥–∞", "–±—ã—Å—Ç—Ä–æ"]
                },
                {
                    "id": 4,
                    "question": "–ï—Å—Ç—å –ª–∏ –≥–∞—Ä–∞–Ω—Ç–∏—è –Ω–∞ —Ç–æ–≤–∞—Ä?",
                    "answer": "–î–∞! –ù–∞ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —É—Ç–æ—á–Ω—è–π—Ç–µ –ø—Ä–∏ –∑–∞–∫–∞–∑–µ ‚úÖ",
                    "keywords": ["–≥–∞—Ä–∞–Ω—Ç–∏—è", "warranty", "–∫–∞—á–µ—Å—Ç–≤–æ", "–∑–∞–º–µ–Ω–∞"]
                },
                {
                    "id": 5,
                    "question": "–ö–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π?",
                    "answer": "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º –∑–¥–µ—Å—å –≤ WhatsApp, –ø–æ–∑–≤–æ–Ω–∏—Ç—å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email. –ú—ã –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏! üìûüìß",
                    "keywords": ["–ø–æ–¥–¥–µ—Ä–∂–∫–∞", "—Å–≤—è–∑–∞—Ç—å—Å—è", "–∫–æ–Ω—Ç–∞–∫—Ç—ã", "—Ç–µ–ª–µ—Ñ–æ–Ω", "–ø–æ–º–æ—â—å"]
                }
            ]
        }
        
        try:
            import os
            os.makedirs(os.path.dirname(self.faq_file_path), exist_ok=True)
            
            with open(self.faq_file_path, 'w', encoding='utf-8') as file:
                json.dump(default_faq, file, ensure_ascii=False, indent=2)
            
            self.faq_data = default_faq['faq']
            logger.info(f"–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª FAQ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {self.faq_file_path}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ FAQ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {e}")
    
    def search_faq(self, query: str, max_results: int = 3) -> List[Dict]:
        """
        –ò—â–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ FAQ –∑–∞–ø–∏—Å–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            max_results: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            
        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö FAQ –∑–∞–ø–∏—Å–µ–π
        """
        if not query or not self.faq_data:
            return []
        
        query_lower = query.lower()
        scored_results = []
        
        for faq_item in self.faq_data:
            score = self._calculate_relevance_score(query_lower, faq_item)
            if score > 0:
                scored_results.append((score, faq_item))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –∏ –±–µ—Ä–µ–º —Ç–æ–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        scored_results.sort(key=lambda x: x[0], reverse=True)
        
        results = [item[1] for item in scored_results[:max_results]]
        
        logger.debug(f"–ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö FAQ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: '{query}'")
        return results
    
    def _calculate_relevance_score(self, query: str, faq_item: Dict) -> float:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å FAQ –∑–∞–ø–∏—Å–∏ –∫ –∑–∞–ø—Ä–æ—Å—É
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ)
            faq_item: FAQ –∑–∞–ø–∏—Å—å
            
        Returns:
            float: –û—Ü–µ–Ω–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ (—á–µ–º –≤—ã—à–µ, —Ç–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–µ–µ)
        """
        score = 0.0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤–∞—Ö
        keywords = faq_item.get('keywords', [])
        for keyword in keywords:
            if keyword.lower() in query:
                score += 3.0  # –í—ã—Å–æ–∫–∏–π –≤–µ—Å –¥–ª—è —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ –≤–æ–ø—Ä–æ—Å–µ
        question = faq_item.get('question', '').lower()
        query_words = query.split()
        
        for word in query_words:
            if len(word) > 2:  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞
                if word in question:
                    score += 2.0
                # –ß–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                elif any(word in q_word for q_word in question.split()):
                    score += 1.0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ –æ—Ç–≤–µ—Ç–µ (–º–µ–Ω—å—à–∏–π –≤–µ—Å)
        answer = faq_item.get('answer', '').lower()
        for word in query_words:
            if len(word) > 2 and word in answer:
                score += 0.5
        
        return score
    
    def get_all_faq(self) -> List[Dict]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ FAQ –∑–∞–ø–∏—Å–∏
        
        Returns:
            List[Dict]: –í—Å–µ FAQ –∑–∞–ø–∏—Å–∏
        """
        return self.faq_data.copy()
    
    def get_faq_by_id(self, faq_id: int) -> Optional[Dict]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç FAQ –∑–∞–ø–∏—Å—å –ø–æ ID
        
        Args:
            faq_id: ID –∑–∞–ø–∏—Å–∏
            
        Returns:
            Dict –∏–ª–∏ None: FAQ –∑–∞–ø–∏—Å—å –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        """
        for item in self.faq_data:
            if item.get('id') == faq_id:
                return item.copy()
        return None
    
    def add_faq_item(self, question: str, answer: str, keywords: Optional[List[str]] = None) -> bool:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é FAQ –∑–∞–ø–∏—Å—å
        
        Args:
            question: –í–æ–ø—Ä–æ—Å
            answer: –û—Ç–≤–µ—Ç
            keywords: –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if not question or not isinstance(question, str) or len(question.strip()) == 0:
                logger.error("–í–æ–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                return False
                
            if not answer or not isinstance(answer, str) or len(answer.strip()) == 0:
                logger.error("–û—Ç–≤–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                return False
            
            # –û—á–∏—â–∞–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            if keywords is None:
                keywords = []
            elif not isinstance(keywords, list):
                logger.error("–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º")
                return False
            else:
                # –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                keywords = [kw.strip() for kw in keywords if kw and isinstance(kw, str) and len(kw.strip()) > 0]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π ID
            max_id = max([item.get('id', 0) for item in self.faq_data], default=0)
            new_id = max_id + 1
            
            new_item = {
                'id': new_id,
                'question': question.strip(),
                'answer': answer.strip(),
                'keywords': keywords
            }
            
            self.faq_data.append(new_item)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            return self.save_faq()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è FAQ –∑–∞–ø–∏—Å–∏: {e}")
            return False
    
    def update_faq_item(self, faq_id: int, question: Optional[str] = None, answer: Optional[str] = None, keywords: Optional[List[str]] = None) -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é FAQ –∑–∞–ø–∏—Å—å
        
        Args:
            faq_id: ID –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            question: –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            answer: –ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            keywords: –ù–æ–≤—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            bool: True –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            for item in self.faq_data:
                if item.get('id') == faq_id:
                    if question is not None:
                        item['question'] = question
                    if answer is not None:
                        item['answer'] = answer
                    if keywords is not None:
                        item['keywords'] = keywords
                    
                    return self.save_faq()
            
            logger.warning(f"FAQ –∑–∞–ø–∏—Å—å —Å ID {faq_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è FAQ –∑–∞–ø–∏—Å–∏: {e}")
            return False
    
    def delete_faq_item(self, faq_id: int) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç FAQ –∑–∞–ø–∏—Å—å –ø–æ ID
        
        Args:
            faq_id: ID –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            
        Returns:
            bool: True –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            original_length = len(self.faq_data)
            self.faq_data = [item for item in self.faq_data if item.get('id') != faq_id]
            
            if len(self.faq_data) < original_length:
                return self.save_faq()
            else:
                logger.warning(f"FAQ –∑–∞–ø–∏—Å—å —Å ID {faq_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è FAQ –∑–∞–ø–∏—Å–∏: {e}")
            return False
    
    def save_faq(self) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç FAQ –≤ —Ñ–∞–π–ª
        
        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            faq_structure = {'faq': self.faq_data}
            
            with open(self.faq_file_path, 'w', encoding='utf-8') as file:
                json.dump(faq_structure, file, ensure_ascii=False, indent=2)
            
            logger.info(f"FAQ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {self.faq_file_path}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è FAQ: {e}")
            return False
    
    def reload_faq(self) -> bool:
        """
        –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç FAQ –∏–∑ —Ñ–∞–π–ª–∞
        
        Returns:
            bool: True –µ—Å–ª–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞
        """
        logger.info("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ FAQ...")
        return self.load_faq()
    
    def get_faq_stats(self) -> Dict:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É FAQ
        
        Returns:
            Dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ FAQ
        """
        return {
            'total_items': len(self.faq_data),
            'total_keywords': sum(len(item.get('keywords', [])) for item in self.faq_data),
            'average_keywords_per_item': round(
                sum(len(item.get('keywords', [])) for item in self.faq_data) / len(self.faq_data), 2
            ) if self.faq_data else 0,
            'file_path': self.faq_file_path
        }